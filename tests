package org.tiaa.ira.funding.util;

import org.tiaa.ira.funding.model.capitalize.CapitalizeStatus;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Map;

public final class StatusMappingUtil {

    // Capitalize → CTH (launch-time)
    private static final Map<CapitalizeStatus, String> CAPITALIZE_TO_CTH = new EnumMap<>(CapitalizeStatus.class);
    // Capitalize → Batch (launch-time)
    private static final Map<CapitalizeStatus, String> CAPITALIZE_TO_BATCH = new EnumMap<>(CapitalizeStatus.class);

    // Batch(status property) → CTH (update-time)
    private static final Map<String, String> BATCH_TO_CTH = new HashMap<>();
    // Batch(status property) → next Batch registration (update-time)
    private static final Map<String, String> BATCH_TO_NEXT_BATCH = new HashMap<>();

    static {
        // Launch: caller already set CTH=SUBMITTED; we advance to AWAITING_FUNDS
        CAPITALIZE_TO_CTH.put(CapitalizeStatus.ROLLOVER_SUBMITTED, "AWAITING_FUNDS");
        CAPITALIZE_TO_BATCH.put(CapitalizeStatus.ROLLOVER_SUBMITTED, "AWAITING_FUNDS");

        // Updates from Batch (status comes from properties.status)
        BATCH_TO_CTH.put("FUND_RECEIVED", "AWAITING_FUNDS_POSTING");
        BATCH_TO_NEXT_BATCH.put("FUND_RECEIVED", "AWAITING_FUNDS_POSTING");

        BATCH_TO_CTH.put("FUND_POSTED", "COMPLETED");

        BATCH_TO_CTH.put("CANCELLED", "CANCELED");
        BATCH_TO_CTH.put("CANCELLED_INELIGIBLE", "CANCELED");
    }

    private StatusMappingUtil() {}

    // 1) parse external string into CapitalizeStatus (optional helper)
    public static CapitalizeStatus getCapitalizeStatus(String status) {
        try { return CapitalizeStatus.valueOf(status); } catch (Exception e) { return null; }
    }

    // 2) map to CTH — accepts either CapitalizeStatus (launch) or batch status String (update)
    public static String getCTHStatus(Object status) {
        if (status instanceof CapitalizeStatus cap) return CAPITALIZE_TO_CTH.get(cap);
        if (status instanceof String s)            return BATCH_TO_CTH.get(s);
        return null;
    }

    // 3) map to Batch registration — accepts either CapitalizeStatus (launch) or batch status String (update)
    public static String getBatchProcessorStatus(Object status) {
        if (status instanceof CapitalizeStatus cap) return CAPITALIZE_TO_BATCH.get(cap);
        if (status instanceof String s)            return BATCH_TO_NEXT_BATCH.get(s);
        return null;
    }
}
